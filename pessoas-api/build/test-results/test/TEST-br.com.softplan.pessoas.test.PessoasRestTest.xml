<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="br.com.softplan.pessoas.test.PessoasRestTest" tests="15" skipped="0" failures="0" errors="0" timestamp="2020-02-05T02:57:30" hostname="DESKTOP-TOI4PDS" time="1.194">
  <properties/>
  <testcase name="_1_naoDevePossuirPessoasCadastradas()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.386"/>
  <testcase name="_2_naoDevePermitirPessoasSemNomeNemCPF()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.289"/>
  <testcase name="_3_naoDevePermitirInserirComCPFErrado()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.05"/>
  <testcase name="_4_devePermitirInserir()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.155"/>
  <testcase name="_5_naoDevePermitirInserirCPFDuplicado()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.027"/>
  <testcase name="_5_naoDevePossuirPessoasCadastradas()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.01"/>
  <testcase name="_7_deveConterApenasUmRegistro()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.009"/>
  <testcase name="_6_deveAlterarNome()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.028"/>
  <testcase name="_8_alteracaoEmCPFInexistente()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.019"/>
  <testcase name="_9_inclusaoDeNovasPessoas()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.044"/>
  <testcase name="_10_deveRemoverCPFExistente()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.035"/>
  <testcase name="_10_usuarioNaoEncontrado()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.012"/>
  <testcase name="_12_deveExistirTresRegistros()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.008"/>
  <testcase name="_13_deveListarTodos()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.094"/>
  <testcase name="_14_deveListarTodosMasculinos()" classname="br.com.softplan.pessoas.test.PessoasRestTest" time="0.02"/>
  <system-out><![CDATA[23:57:17.965 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
23:57:18.011 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
23:57:18.050 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [br.com.softplan.pessoas.test.PessoasRestTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
23:57:18.077 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [br.com.softplan.pessoas.test.PessoasRestTest], using SpringBootContextLoader
23:57:18.083 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [br.com.softplan.pessoas.test.PessoasRestTest]: class path resource [br/com/softplan/pessoas/test/PessoasRestTest-context.xml] does not exist
23:57:18.084 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [br.com.softplan.pessoas.test.PessoasRestTest]: class path resource [br/com/softplan/pessoas/test/PessoasRestTestContext.groovy] does not exist
23:57:18.084 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [br.com.softplan.pessoas.test.PessoasRestTest]: no resource found for suffixes {-context.xml, Context.groovy}.
23:57:18.161 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [br.com.softplan.pessoas.test.PessoasRestTest]
23:57:18.393 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [br.com.softplan.pessoas.test.PessoasRestTest]: using defaults.
23:57:18.394 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
23:57:18.435 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@4b046e7f, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6fcf19fd, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@d08df16, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@346ecdea, org.springframework.test.context.support.DirtiesContextTestExecutionListener@5cf12a8e, org.springframework.test.context.transaction.TransactionalTestExecutionListener@4b66c01c, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@5d5609, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@421eda75, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@17ee3de2, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@6af56923, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@72876a, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@348b2863]
23:57:18.500 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.8.RELEASE)

2020-02-04 23:57:19.049  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Starting PessoasRestTest on DESKTOP-TOI4PDS with PID 28856 (started by Ruan in C:\Users\Ruan\Downloads\Softplan\pessoas-app\pessoas-api)
2020-02-04 23:57:19.051  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : No active profile set, falling back to default profiles: default
2020-02-04 23:57:21.268  INFO 28856 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2020-02-04 23:57:21.423  INFO 28856 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 138ms. Found 1 repository interfaces.
2020-02-04 23:57:22.433  INFO 28856 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9d4c038b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-04 23:57:22.526  INFO 28856 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$1ccc50bd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-04 23:57:22.752  INFO 28856 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-04 23:57:23.130  INFO 28856 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-04 23:57:23.442  INFO 28856 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-02-04 23:57:23.577  INFO 28856 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.11.Final}
2020-02-04 23:57:23.579  INFO 28856 --- [    Test worker] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2020-02-04 23:57:23.826  INFO 28856 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-02-04 23:57:24.103  INFO 28856 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: 
    
    drop table tb_pessoa if exists
Hibernate: 
    
    drop sequence if exists seq_pessoa
Hibernate: create sequence seq_pessoa start with 1 increment by 1
Hibernate: 
    
    create table tb_pessoa (
       id_pessoa bigint not null,
        dt_inclusao timestamp not null,
        dt_atualizacao timestamp not null,
        vl_cpf varchar(255) not null,
        dt_nascimento date,
        vl_email varchar(150),
        vl_nacionalidade varchar(50),
        vl_naturalidade varchar(50),
        vl_nome varchar(60) not null,
        vl_sexo varchar(10),
        primary key (id_pessoa)
    )
Hibernate: 
    
    alter table tb_pessoa 
       add constraint UK_ikoceyqgma2yxismb76pma6vp unique (vl_cpf)
2020-02-04 23:57:25.459  INFO 28856 --- [    Test worker] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@4c62487'
2020-02-04 23:57:25.464  INFO 28856 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-04 23:57:27.100  WARN 28856 --- [    Test worker] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-04 23:57:28.113  INFO 28856 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path '/actuator'
2020-02-04 23:57:28.547  INFO 28856 --- [    Test worker] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-02-04 23:57:29.149  INFO 28856 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-04 23:57:30.070  INFO 28856 --- [    Test worker] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-02-04 23:57:30.115  INFO 28856 --- [    Test worker] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-02-04 23:57:30.168  INFO 28856 --- [    Test worker] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-02-04 23:57:30.443  INFO 28856 --- [    Test worker] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: editarUsingPUT_1
2020-02-04 23:57:30.461  INFO 28856 --- [    Test worker] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listarPessoasUsingGET_1
2020-02-04 23:57:30.464  INFO 28856 --- [    Test worker] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removerUsingDELETE_1
2020-02-04 23:57:30.467  INFO 28856 --- [    Test worker] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: salvarUsingPOST_1
2020-02-04 23:57:30.500  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Started PessoasRestTest in 11.981 seconds (JVM running for 14.355)
2020-02-04 23:57:30.552  INFO 28856 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2020-02-04 23:57:30.553  INFO 28856 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2020-02-04 23:57:30.583  INFO 28856 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 30 ms
2020-02-04 23:57:30.688  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 1 - Não deve haver nenhum dado cadastrado no banco H2 - Memory
2020-02-04 23:57:30.740  INFO 28856 --- [    Test worker] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_
2020-02-04 23:57:30.978  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 2 - Não deve permitir inserir sem Nome, CPF e Sexo
2020-02-04 23:57:31.267  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 3 - Não deve permitir inserir com CPF errado
2020-02-04 23:57:31.269  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi","sexo":"Masculino","cpf":"0286223588113","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.309  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"data":"2020-02-05T02:57:31.308+0000","mensagem":"CPF inválido: 0286223588113","detalhes":"uri=/api/v1/pessoas"}
2020-02-04 23:57:31.317  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 4 - Deve permitir inserir com dados validos
2020-02-04 23:57:31.319  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi","sexo":"Masculino","cpf":"02862588113","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    call next value for seq_pessoa
Hibernate: 
    /* insert br.com.softplan.pessoas.core.jpa.pessoa.Pessoa
        */ insert 
        into
            tb_pessoa
            (dt_inclusao, dt_atualizacao, vl_cpf, dt_nascimento, vl_email, vl_nacionalidade, vl_naturalidade, vl_nome, vl_sexo, id_pessoa) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2020-02-04 23:57:31.465  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi","sexo":"Masculino","cpf":"028.625.881-13","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.473  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 5 - Deve permitir inserir com dados validos
2020-02-04 23:57:31.474  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi","sexo":"Masculino","cpf":"02862588113","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
2020-02-04 23:57:31.493  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"data":"2020-02-05T02:57:31.492+0000","mensagem":"Pessoa ja encontrada com o CPF: 028.625.881-13","detalhes":"uri=/api/v1/pessoas"}
2020-02-04 23:57:31.501  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 6 - Deve Existir somente um registro na base
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_
2020-02-04 23:57:31.512  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 7 - Deve Existir somente um registro na base
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_
2020-02-04 23:57:31.521  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 6 - Alterar um usuário existemte
2020-02-04 23:57:31.522  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi - Alterado","sexo":"Masculino","cpf":"02862588113","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    /* update
        br.com.softplan.pessoas.core.jpa.pessoa.Pessoa */ update
            tb_pessoa 
        set
            dt_inclusao=?,
            dt_atualizacao=?,
            vl_cpf=?,
            dt_nascimento=?,
            vl_email=?,
            vl_nacionalidade=?,
            vl_naturalidade=?,
            vl_nome=?,
            vl_sexo=? 
        where
            id_pessoa=?
2020-02-04 23:57:31.542  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi - Alterado","sexo":"Masculino","cpf":"028.625.881-13","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.549  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 8 - Não pode atualizar um registro que não existe
2020-02-04 23:57:31.551  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi - Alterado","sexo":"Masculino","cpf":"17890228007","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
2020-02-04 23:57:31.560  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"data":"2020-02-05T02:57:31.559+0000","mensagem":"Pessoa não encontrada com o CPF: 178.902.280-07","detalhes":"uri=/api/v1/pessoas/17890228007"}
2020-02-04 23:57:31.568  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 8 - Não pode atualizar um registro que não existe
2020-02-04 23:57:31.569  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"João da Silva","sexo":"Masculino","cpf":"17890228007","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    call next value for seq_pessoa
Hibernate: 
    /* insert br.com.softplan.pessoas.core.jpa.pessoa.Pessoa
        */ insert 
        into
            tb_pessoa
            (dt_inclusao, dt_atualizacao, vl_cpf, dt_nascimento, vl_email, vl_nacionalidade, vl_naturalidade, vl_nome, vl_sexo, id_pessoa) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2020-02-04 23:57:31.580  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"João da Silva","sexo":"Masculino","cpf":"178.902.280-07","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.581  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Maria da Silva","sexo":"Feminino","cpf":"03410002057","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    call next value for seq_pessoa
Hibernate: 
    /* insert br.com.softplan.pessoas.core.jpa.pessoa.Pessoa
        */ insert 
        into
            tb_pessoa
            (dt_inclusao, dt_atualizacao, vl_cpf, dt_nascimento, vl_email, vl_nacionalidade, vl_naturalidade, vl_nome, vl_sexo, id_pessoa) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2020-02-04 23:57:31.593  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Maria da Silva","sexo":"Feminino","cpf":"034.100.020-57","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.594  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Geraldo Santos","sexo":"Masculino","cpf":"99830860000","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    call next value for seq_pessoa
Hibernate: 
    /* insert br.com.softplan.pessoas.core.jpa.pessoa.Pessoa
        */ insert 
        into
            tb_pessoa
            (dt_inclusao, dt_atualizacao, vl_cpf, dt_nascimento, vl_email, vl_nacionalidade, vl_naturalidade, vl_nome, vl_sexo, id_pessoa) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2020-02-04 23:57:31.605  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Geraldo Santos","sexo":"Masculino","cpf":"998.308.600-00","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.612  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 10 - Deve remover um usuário (CPF - 02862588113)
2020-02-04 23:57:31.613  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":null,"sexo":null,"cpf":null,"naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
Hibernate: 
    /* delete br.com.softplan.pessoas.core.jpa.pessoa.Pessoa */ delete 
        from
            tb_pessoa 
        where
            id_pessoa=?
2020-02-04 23:57:31.642  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":"Ruan Carlos Perondi - Alterado","sexo":"Masculino","cpf":"028.625.881-13","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
2020-02-04 23:57:31.647  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 11 - Não deve remover um usuário (CPF - 02862588113)
2020-02-04 23:57:31.649  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"nome":null,"sexo":null,"cpf":null,"naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.cpf=:param0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_cpf=?
2020-02-04 23:57:31.655  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"data":"2020-02-05T02:57:31.654+0000","mensagem":"Pessoa não encontrada com o CPF: 028.625.881-13","detalhes":"uri=/api/v1/pessoas/02862588113"}
2020-02-04 23:57:31.661  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 12 - Deve Existir 3 registros na base
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_
2020-02-04 23:57:31.670  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 11 - Não deve remover um usuário (CPF - 02862588113)
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        :param0 = true 
    order by
        generatedAlias0.idPessoa asc */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            ?=1 
        order by
            pessoa0_.id_pessoa asc limit ?
2020-02-04 23:57:31.758  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"content":[{"nome":"João da Silva","sexo":"Masculino","cpf":"178.902.280-07","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null},{"nome":"Maria da Silva","sexo":"Feminino","cpf":"034.100.020-57","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null},{"nome":"Geraldo Santos","sexo":"Masculino","cpf":"998.308.600-00","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}],"pageable":{"sort":{"unsorted":false,"sorted":true,"empty":false},"offset":0,"pageSize":10,"pageNumber":0,"paged":true,"unpaged":false},"last":true,"totalElements":3,"totalPages":1,"size":10,"number":0,"numberOfElements":3,"sort":{"unsorted":false,"sorted":true,"empty":false},"first":true,"empty":false}
2020-02-04 23:57:31.765  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : Teste 11 - Não deve remover um usuário (CPF - 02862588113)
Hibernate: 
    /* select
        generatedAlias0 
    from
        Pessoa as generatedAlias0 
    where
        generatedAlias0.sexo=:param0 
    order by
        generatedAlias0.idPessoa asc */ select
            pessoa0_.id_pessoa as id_pesso1_0_,
            pessoa0_.dt_inclusao as dt_inclu2_0_,
            pessoa0_.dt_atualizacao as dt_atual3_0_,
            pessoa0_.vl_cpf as vl_cpf4_0_,
            pessoa0_.dt_nascimento as dt_nasci5_0_,
            pessoa0_.vl_email as vl_email6_0_,
            pessoa0_.vl_nacionalidade as vl_nacio7_0_,
            pessoa0_.vl_naturalidade as vl_natur8_0_,
            pessoa0_.vl_nome as vl_nome9_0_,
            pessoa0_.vl_sexo as vl_sexo10_0_ 
        from
            tb_pessoa pessoa0_ 
        where
            pessoa0_.vl_sexo=? 
        order by
            pessoa0_.id_pessoa asc limit ?
2020-02-04 23:57:31.778  INFO 28856 --- [    Test worker] b.c.s.pessoas.test.PessoasRestTest       : {"content":[{"nome":"João da Silva","sexo":"Masculino","cpf":"178.902.280-07","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null},{"nome":"Geraldo Santos","sexo":"Masculino","cpf":"998.308.600-00","naturalidade":null,"nacionalidade":null,"dataNascimento":null,"email":null}],"pageable":{"sort":{"unsorted":false,"sorted":true,"empty":false},"offset":0,"pageSize":10,"pageNumber":0,"paged":true,"unpaged":false},"last":true,"totalElements":2,"totalPages":1,"size":10,"number":0,"numberOfElements":2,"sort":{"unsorted":false,"sorted":true,"empty":false},"first":true,"empty":false}
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
